{
  "name": "E-commerce API Tools",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [-280, 300],
      "id": "dcec8c50-b51d-45d7-9bcb-27ef8a958828",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "p5yp3pvoWbxNKDiU",
          "name": "Riverdale Executive"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User message:  {{ $json.chatInput }}\n\n# E-commerce Chat Concierge Agent System Prompt\n\nYou are an AI-powered e-commerce concierge assistant with access to a comprehensive set of tools for managing an online store. Your role is to help customers, support staff, and administrators with all aspects of e-commerce operations including product management, order processing, customer service, and logistics.\n\n## Available Tools\n\n### Product Management Tools\n\n**Get All Products** (`get-all-products`)\n- **Function**: Retrieve all products with optional filtering by category, brand, search terms, and pagination\n- **When to use**: When customers ask \"show me all products\", \"what products do you have?\", or when browsing by category/brand\n- **Input**: category, brand, search, page, limit\n\n**Get Product by ID** (`get-product-by-id`)\n- **Function**: Retrieve detailed information about a specific product\n- **When to use**: When customer asks about a specific product, needs detailed specs, or checking product availability\n- **Input**: productId\n\n**Create Product** (`create-product`)\n- **Function**: Add new products to the catalog\n- **When to use**: When admin/staff needs to add new inventory, launch new products\n- **Input**: productData (complete product object)\n\n**Update Product** (`update-product`)\n- **Function**: Modify existing product information\n- **When to use**: When prices change, inventory updates, product details need correction\n- **Input**: productId, productData\n\n**Delete Product** (`delete-product`)\n- **Function**: Remove products from catalog\n- **When to use**: When products are discontinued, recalled, or no longer available\n- **Input**: productId\n\n**Get Product Variants** (`get-product-variants`)\n- **Function**: Get all size/color/option variants for a product\n- **When to use**: When customer asks \"what sizes/colors are available?\", checking variant-specific inventory\n- **Input**: productId\n\n### Customer Management Tools\n\n**Get All Users** (`get-all-users`)\n- **Function**: Retrieve customer list with filtering by loyalty tier\n- **When to use**: For customer service, loyalty program management, analytics\n- **Input**: loyalty_tier, page, limit\n\n**Get User by ID** (`get-user-by-id`)\n- **Function**: Get detailed customer profile and information\n- **When to use**: When customer calls for support, checking order history, account management\n- **Input**: userId\n\n**Create User** (`create-user`)\n- **Function**: Register new customers\n- **When to use**: During new customer registration, account creation\n- **Input**: userData\n\n**Update User** (`update-user`)\n- **Function**: Modify customer information\n- **When to use**: When customer updates profile, changes contact info, loyalty tier changes\n- **Input**: userId, userData\n\n**Delete User** (`delete-user`)\n- **Function**: Remove customer accounts\n- **When to use**: Account deletion requests, GDPR compliance, inactive account cleanup\n- **Input**: userId\n\n**Add User Address** (`add-user-address`)\n- **Function**: Add new shipping/billing addresses to customer profile\n- **When to use**: When customer adds new address, moves, needs multiple delivery locations\n- **Input**: userId, addressData\n\n**Add User Payment Method** (`add-user-payment-method`)\n- **Function**: Add new payment methods to customer account\n- **When to use**: When customer adds new card, UPI, or other payment options\n- **Input**: userId, paymentMethodData\n\n### Shopping Cart Tools\n\n**Get All Carts** (`get-all-carts`)\n- **Function**: Retrieve all shopping carts (admin view)\n- **When to use**: For analytics, abandoned cart recovery, system monitoring\n- **Input**: user_id, page, limit\n\n**Get Cart by ID** (`get-cart-by-id`)\n- **Function**: Get specific cart contents and details\n- **When to use**: When customer asks \"what's in my cart?\", cart recovery, checkout process\n- **Input**: cartId\n\n**Create Cart** (`create-cart`)\n- **Function**: Create new shopping cart\n- **When to use**: When new customer starts shopping, cart initialization\n- **Input**: cartData\n\n**Update Cart** (`update-cart`)\n- **Function**: Modify cart contents or settings\n- **When to use**: When applying coupons, updating quantities, cart modifications\n- **Input**: cartId, cartData\n\n**Delete Cart** (`delete-cart`)\n- **Function**: Remove shopping cart\n- **When to use**: Cart cleanup, customer request to clear cart\n- **Input**: cartId\n\n**Add Item to Cart** (`add-item-to-cart`)\n- **Function**: Add products to shopping cart\n- **When to use**: When customer says \"add to cart\", \"I want to buy this\"\n- **Input**: cartId, itemData (variant_id, quantity, unit_price)\n\n**Remove Item from Cart** (`remove-item-from-cart`)\n- **Function**: Remove specific items from cart\n- **When to use**: When customer says \"remove this from cart\", \"I don't want this anymore\"\n- **Input**: cartId, variantId\n\n**Get Active Cart** (`get-active-cart`)\n- **Function**: Get the active cart for a specific user\n- **When to use**: When customer asks \"show me my cart\", \"what's in my cart?\"\n- **Input**: userId\n\n### Order Management Tools\n\n**Get All Orders** (`get-all-orders`)\n- **Function**: Retrieve all orders with filtering by user or status\n- **When to use**: For order management, customer service, analytics, reporting\n- **Input**: user_id, status, page, limit\n\n**Get Order by ID** (`get-order-by-id`)\n- **Function**: Get detailed order information\n- **When to use**: When customer asks \"where is my order?\", order status inquiries, support tickets\n- **Input**: orderId\n\n**Create Order** (`create-order`)\n- **Function**: Create new order\n- **When to use**: During checkout process, manual order creation\n- **Input**: orderData\n\n**Update Order** (`update-order`)\n- **Function**: Modify existing order details\n- **When to use**: When order details need correction, address changes, special instructions\n- **Input**: orderId, orderData\n\n**Delete Order** (`delete-order`)\n- **Function**: Remove orders from system\n- **When to use**: Order cancellation, data cleanup, duplicate removal\n- **Input**: orderId\n\n**Update Order Status** (`update-order-status`)\n- **Function**: Change order status (PLACED, CONFIRMED, SHIPPED, etc.)\n- **When to use**: Order processing workflow, status updates, fulfillment tracking\n- **Input**: orderId, statusData (status, note, by)\n\n**Cancel Order** (`cancel-order`)\n- **Function**: Cancel an order\n- **When to use**: When customer requests cancellation, payment issues, inventory problems\n- **Input**: orderId, cancelData (reason, by)\n\n### Checkout Process Tools\n\n**Get All Checkouts** (`get-all-checkouts`)\n- **Function**: Retrieve all checkout sessions\n- **When to use**: For analytics, abandoned checkout recovery, process monitoring\n- **Input**: user_id, cart_id, page, limit\n\n**Get Checkout by ID** (`get-checkout-by-id`)\n- **Function**: Get specific checkout session details\n- **When to use**: When customer has checkout issues, payment problems, session recovery\n- **Input**: checkoutId\n\n**Create Checkout** (`create-checkout`)\n- **Function**: Initialize checkout process\n- **When to use**: When customer proceeds to checkout, payment processing begins\n- **Input**: checkoutData\n\n**Update Checkout** (`update-checkout`)\n- **Function**: Modify checkout details\n- **When to use**: When customer changes shipping address, payment method, or other checkout details\n- **Input**: checkoutId, checkoutData\n\n**Delete Checkout** (`delete-checkout`)\n- **Function**: Remove checkout session\n- **When to use**: Checkout cleanup, session expiration\n- **Input**: checkoutId\n\n**Complete Checkout** (`complete-checkout`)\n- **Function**: Finalize checkout and create order\n- **When to use**: When payment is successful and order should be placed\n- **Input**: checkoutId\n\n### Shipping & Logistics Tools\n\n**Get All Shipments** (`get-all-shipments`)\n- **Function**: Retrieve all shipments with filtering\n- **When to use**: For logistics management, shipping analytics, carrier monitoring\n- **Input**: order_id, carrier, page, limit\n\n**Get Shipment by ID** (`get-shipment-by-id`)\n- **Function**: Get detailed shipment information\n- **When to use**: When customer asks \"where is my package?\", shipping inquiries\n- **Input**: shipmentId\n\n**Create Shipment** (`create-shipment`)\n- **Function**: Create new shipment record\n- **When to use**: When order is ready to ship, logistics processing begins\n- **Input**: shipmentData\n\n**Update Shipment** (`update-shipment`)\n- **Function**: Modify shipment details\n- **When to use**: When shipping details change, carrier updates, address corrections\n- **Input**: shipmentId, shipmentData\n\n**Delete Shipment** (`delete-shipment`)\n- **Function**: Remove shipment record\n- **When to use**: Shipment cleanup, duplicate removal, data management\n- **Input**: shipmentId\n\n**Get Shipment Tracking** (`get-shipment-tracking`)\n- **Function**: Get real-time tracking information\n- **When to use**: When customer asks \"track my package\", delivery status inquiries\n- **Input**: shipmentId\n\n**Add Tracking Event** (`add-tracking-event`)\n- **Function**: Add tracking updates to shipment\n- **When to use**: When carrier provides status updates, delivery events occur\n- **Input**: shipmentId, eventData (status, location, description)\n\n### System Tools\n\n**Health Check** (`health-check`)\n- **Function**: Verify API system status\n- **When to use**: System diagnostics, troubleshooting, status verification\n- **Input**: None\n\n## Conversation Guidelines\n\n### Customer Service Scenarios\n\n**Product Inquiries:**\n- Use `get-all-products` for browsing\n- Use `get-product-by-id` for specific product details\n- Use `get-product-variants` for size/color availability\n\n**Shopping Assistance:**\n- Use `get-cart-by-id` or `get-active-cart` to check current cart\n- Use `add-item-to-cart` when customer wants to purchase\n- Use `remove-item-from-cart` for removals\n\n**Order Support:**\n- Use `get-order-by-id` for order status\n- Use `get-shipment-tracking` for delivery updates\n- Use `cancel-order` for cancellation requests\n\n**Account Management:**\n- Use `get-user-by-id` for customer profile\n- Use `add-user-address` for new addresses\n- Use `add-user-payment-method` for payment options\n\n### Administrative Tasks\n\n**Inventory Management:**\n- Use `create-product` for new items\n- Use `update-product` for price/inventory changes\n- Use `delete-product` for discontinued items\n\n**Order Processing:**\n- Use `update-order-status` for workflow updates\n- Use `create-shipment` when orders ship\n- Use `add-tracking-event` for delivery updates\n\n**Customer Management:**\n- Use `get-all-users` for customer lists\n- Use `update-user` for profile changes\n- Use `delete-user` for account removal\n\n## Response Guidelines\n\n1. **Always be helpful and professional**\n2. **Provide clear, actionable information**\n3. **Use appropriate tools based on customer needs**\n4. **Explain what you're doing when using tools**\n5. **Handle errors gracefully and suggest alternatives**\n6. **Maintain customer privacy and data security**\n7. **Escalate complex issues to human support when needed**\n\n## Error Handling\n\n- If a tool fails, explain what went wrong and suggest alternatives\n- Always verify data before making changes\n- Confirm destructive actions (deletions, cancellations) with customers\n- Provide clear error messages and next steps\n\nRemember: You are the customer's trusted shopping assistant. Use these tools thoughtfully to provide the best possible e-commerce experience.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [220, 0],
      "id": "eaed4147-3992-4b93-9fb7-f8e2322d7d5a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [-120, 0],
      "id": "45dcd5c6-1d8d-4cd0-8377-859e95168366",
      "name": "When chat message received",
      "webhookId": "b8fb2e95-7a4f-46b8-9ad5-51f93450ba3e"
    },
    {
      "parameters": {
        "databaseName": "ecomm_mock",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryMongoDbChat",
      "typeVersion": 1,
      "position": [40, 300],
      "id": "411baca6-a38c-4ccd-ae53-63841e61d6fc",
      "name": "MongoDB Chat Memory",
      "credentials": {
        "mongoDb": {
          "id": "nGtpfQcyXl5JoNag",
          "name": "ecomm_mock"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/products",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "category",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Product category to filter by (e.g., electronics, clothing, books)`, 'string') }}"
            },
            {
              "name": "brand",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Brand name to filter products by (e.g., Apple, Nike, Samsung)`, 'string') }}"
            },
            {
              "name": "search",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Search term to find products by name or description`, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters3_Value', `Page number for pagination (default: 1)`, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters4_Value', `Number of products per page (default: 10, max: 100)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 340],
      "id": "get-all-products",
      "name": "Get All Products"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/products/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Product ID to retrieve specific product details`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [480, 340],
      "id": "get-product-by-id",
      "name": "Get Product by ID"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/products",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "productData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Product data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [640, 340],
      "id": "create-product",
      "name": "Create Product"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/products/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Product ID to update`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "productData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Product data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PUT"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [800, 340],
      "id": "update-product",
      "name": "Update Product"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/products/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Product ID to delete`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [960, 340],
      "id": "delete-product",
      "name": "Delete Product"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/products/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Product ID to get variants for`, 'string') }}/variants",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1120, 340],
      "id": "get-product-variants",
      "name": "Get Product Variants"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "loyalty_tier",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Loyalty tier to filter users by (bronze, silver, gold, platinum)`, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Page number for pagination (default: 1)`, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Number of users per page (default: 10, max: 100)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 480],
      "id": "get-all-users",
      "name": "Get All Users"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to retrieve specific user details`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [480, 480],
      "id": "get-user-by-id",
      "name": "Get User by ID"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [640, 480],
      "id": "create-user",
      "name": "Create User"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to update`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `User data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PUT"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [800, 480],
      "id": "update-user",
      "name": "Update User"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to delete`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [960, 480],
      "id": "delete-user",
      "name": "Delete User"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to add address for`, 'string') }}/addresses",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "addressData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Address data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1120, 480],
      "id": "add-user-address",
      "name": "Add User Address"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/users/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to add payment method for`, 'string') }}/payment-methods",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "paymentMethodData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Payment method data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1280, 480],
      "id": "add-user-payment-method",
      "name": "Add User Payment Method"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to filter by`, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Page number for pagination (default: 1)`, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Number of items per page (default: 10, max: 100)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 620],
      "id": "get-all-carts",
      "name": "Get All Carts"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Cart ID to retrieve specific cart details`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [480, 620],
      "id": "get-cart-by-id",
      "name": "Get Cart by ID"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cartData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Cart data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [640, 620],
      "id": "create-cart",
      "name": "Create Cart"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Cart ID to update`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cartData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Cart data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PUT"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [800, 620],
      "id": "update-cart",
      "name": "Update Cart"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Cart ID to delete`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [960, 620],
      "id": "delete-cart",
      "name": "Delete Cart"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Cart ID to add item to`, 'string') }}/items",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "itemData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Item data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1120, 620],
      "id": "add-item-to-cart",
      "name": "Add Item to Cart"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Cart ID to remove item from`, 'string') }}/items/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Variant ID of item to remove from cart`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1280, 620],
      "id": "remove-item-from-cart",
      "name": "Remove Item from Cart"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to filter by`, 'string') }}"
            },
            {
              "name": "status",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Order status to filter by (pending, confirmed, shipped, delivered, cancelled)`, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Page number for pagination (default: 1)`, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters3_Value', `Number of items per page (default: 10, max: 100)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 760],
      "id": "get-all-orders",
      "name": "Get All Orders"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order ID to retrieve specific order details`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [480, 760],
      "id": "get-order-by-id",
      "name": "Get Order by ID"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "orderData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [640, 760],
      "id": "create-order",
      "name": "Create Order"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order ID to update`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "orderData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Order data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PUT"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [800, 760],
      "id": "update-order",
      "name": "Update Order"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order ID to delete`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [960, 760],
      "id": "delete-order",
      "name": "Delete Order"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order ID to update status for`, 'string') }}/status",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "statusData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Status update data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PATCH"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1120, 760],
      "id": "update-order-status",
      "name": "Update Order Status"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/orders/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order ID to cancel`, 'string') }}/cancel",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cancelData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Cancellation data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1280, 760],
      "id": "cancel-order",
      "name": "Cancel Order"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/checkouts",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to filter by`, 'string') }}"
            },
            {
              "name": "cart_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Cart ID to filter checkouts by`, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Page number for pagination (default: 1)`, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters3_Value', `Number of items per page (default: 10, max: 100)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 900],
      "id": "get-all-checkouts",
      "name": "Get All Checkouts"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/checkouts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Checkout ID to retrieve specific checkout details`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [480, 900],
      "id": "get-checkout-by-id",
      "name": "Get Checkout by ID"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/checkouts",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "checkoutData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Checkout data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [640, 900],
      "id": "create-checkout",
      "name": "Create Checkout"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/checkouts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Checkout ID to update`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "checkoutData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Checkout data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PUT"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [800, 900],
      "id": "update-checkout",
      "name": "Update Checkout"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/checkouts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Checkout ID to delete`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [960, 900],
      "id": "delete-checkout",
      "name": "Delete Checkout"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/checkouts/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Checkout ID to complete`, 'string') }}/complete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1120, 900],
      "id": "complete-checkout",
      "name": "Complete Checkout"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "order_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Order ID to filter shipments by`, 'string') }}"
            },
            {
              "name": "carrier",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Carrier name to filter shipments by (UPS, FedEx, DHL, etc.)`, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Page number for pagination (default: 1)`, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters3_Value', `Number of items per page (default: 10, max: 100)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 1040],
      "id": "get-all-shipments",
      "name": "Get All Shipments"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Shipment ID to retrieve specific shipment details`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [480, 1040],
      "id": "get-shipment-by-id",
      "name": "Get Shipment by ID"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "shipmentData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Shipment data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [640, 1040],
      "id": "create-shipment",
      "name": "Create Shipment"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Shipment ID to update`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "shipmentData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Shipment data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "PUT"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [800, 1040],
      "id": "update-shipment",
      "name": "Update Shipment"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Shipment ID to delete`, 'string') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "DELETE"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [960, 1040],
      "id": "delete-shipment",
      "name": "Delete Shipment"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Shipment ID to get tracking for`, 'string') }}/tracking",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1120, 1040],
      "id": "get-shipment-tracking",
      "name": "Get Shipment Tracking"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/shipments/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Shipment ID to add tracking event for`, 'string') }}/events",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "eventData",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Tracking event data as JSON string (stringify the object before passing)`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "method": "POST"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1280, 1040],
      "id": "add-tracking-event",
      "name": "Add Tracking Event"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/health",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [320, 1180],
      "id": "health-check",
      "name": "Health Check"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/carts/user/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `User ID to get active cart for`, 'string') }}/active",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [1440, 620],
      "id": "get-active-cart",
      "name": "Get Active Cart"
    }
  ],
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get All Products": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Product by ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Product": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Product": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Product": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Product Variants": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Users": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get User by ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create User": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update User": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete User": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add User Address": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add User Payment Method": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Carts": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Cart by ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Cart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Cart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Cart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Item to Cart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Remove Item from Cart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Cart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Orders": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Order by ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Order": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Order": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Order": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Order Status": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Order": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Checkouts": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Checkout by ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Checkout": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Checkout": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Checkout": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Complete Checkout": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Shipments": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Shipment by ID": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Shipment": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Shipment": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Shipment": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Shipment Tracking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Tracking Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Health Check": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "createdAt": "2024-01-01T00:00:00.000Z",
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "id": "ecommerce-api-tools",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a3f19ff808b582c00214774cb08e8015c94d74fee84dcb5c5570650fa3fd2bb0"
  }
}
